# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OneClickShipmentResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_id': 'ShipmentId',
        'package_document_details': 'PackageDocumentDetailList',
        'promise': 'Promise',
        'carrier': 'Carrier',
        'service': 'Service',
        'total_charge': 'Currency'
    }

    attribute_map = {
        'shipment_id': 'shipmentId',
        'package_document_details': 'packageDocumentDetails',
        'promise': 'promise',
        'carrier': 'carrier',
        'service': 'service',
        'total_charge': 'totalCharge'
    }

    def __init__(self, shipment_id=None, package_document_details=None, promise=None, carrier=None, service=None, total_charge=None):  # noqa: E501
        """OneClickShipmentResult - a model defined in Swagger"""  # noqa: E501
        self._shipment_id = None
        self._package_document_details = None
        self._promise = None
        self._carrier = None
        self._service = None
        self._total_charge = None
        self.discriminator = None
        self.shipment_id = shipment_id
        self.package_document_details = package_document_details
        self.promise = promise
        self.carrier = carrier
        self.service = service
        self.total_charge = total_charge

    @property
    def shipment_id(self):
        """Gets the shipment_id of this OneClickShipmentResult.  # noqa: E501


        :return: The shipment_id of this OneClickShipmentResult.  # noqa: E501
        :rtype: ShipmentId
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this OneClickShipmentResult.


        :param shipment_id: The shipment_id of this OneClickShipmentResult.  # noqa: E501
        :type: ShipmentId
        """
        if shipment_id is None:
            raise ValueError("Invalid value for `shipment_id`, must not be `None`")  # noqa: E501

        self._shipment_id = shipment_id

    @property
    def package_document_details(self):
        """Gets the package_document_details of this OneClickShipmentResult.  # noqa: E501


        :return: The package_document_details of this OneClickShipmentResult.  # noqa: E501
        :rtype: PackageDocumentDetailList
        """
        return self._package_document_details

    @package_document_details.setter
    def package_document_details(self, package_document_details):
        """Sets the package_document_details of this OneClickShipmentResult.


        :param package_document_details: The package_document_details of this OneClickShipmentResult.  # noqa: E501
        :type: PackageDocumentDetailList
        """
        if package_document_details is None:
            raise ValueError("Invalid value for `package_document_details`, must not be `None`")  # noqa: E501

        self._package_document_details = package_document_details

    @property
    def promise(self):
        """Gets the promise of this OneClickShipmentResult.  # noqa: E501


        :return: The promise of this OneClickShipmentResult.  # noqa: E501
        :rtype: Promise
        """
        return self._promise

    @promise.setter
    def promise(self, promise):
        """Sets the promise of this OneClickShipmentResult.


        :param promise: The promise of this OneClickShipmentResult.  # noqa: E501
        :type: Promise
        """
        if promise is None:
            raise ValueError("Invalid value for `promise`, must not be `None`")  # noqa: E501

        self._promise = promise

    @property
    def carrier(self):
        """Gets the carrier of this OneClickShipmentResult.  # noqa: E501


        :return: The carrier of this OneClickShipmentResult.  # noqa: E501
        :rtype: Carrier
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this OneClickShipmentResult.


        :param carrier: The carrier of this OneClickShipmentResult.  # noqa: E501
        :type: Carrier
        """
        if carrier is None:
            raise ValueError("Invalid value for `carrier`, must not be `None`")  # noqa: E501

        self._carrier = carrier

    @property
    def service(self):
        """Gets the service of this OneClickShipmentResult.  # noqa: E501


        :return: The service of this OneClickShipmentResult.  # noqa: E501
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this OneClickShipmentResult.


        :param service: The service of this OneClickShipmentResult.  # noqa: E501
        :type: Service
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def total_charge(self):
        """Gets the total_charge of this OneClickShipmentResult.  # noqa: E501


        :return: The total_charge of this OneClickShipmentResult.  # noqa: E501
        :rtype: Currency
        """
        return self._total_charge

    @total_charge.setter
    def total_charge(self, total_charge):
        """Sets the total_charge of this OneClickShipmentResult.


        :param total_charge: The total_charge of this OneClickShipmentResult.  # noqa: E501
        :type: Currency
        """
        if total_charge is None:
            raise ValueError("Invalid value for `total_charge`, must not be `None`")  # noqa: E501

        self._total_charge = total_charge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OneClickShipmentResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneClickShipmentResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
