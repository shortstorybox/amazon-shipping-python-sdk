# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DetailCodes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    BUSINESSCLOSED="BusinessClosed"	#Attempted delivery but the business was closed.
    CUSTOMERUNAVAILABLE="CustomerUnavailable"	#Attempted delivery but the recipient was unavailable.
    PAYMENTNOTREADY="PaymentNotReady"	#Attempted delivery but cash was not available from recipient.
    OTPNOTAVAILABLE="OtpNotAvailable"	#Attempted delivery but the recipient did not have the PIN available.
    DELIVERYATTEMPTED="DeliveryAttempted"	#Delivery was attempted.
    UNABLETOACCESS="UnableToAccess"	#Attempted delivery but could not access the recipient location.
    UNABLETOCONTACTRECIPIENT="UnableToContactRecipient"	#Attempted delivery but unable to contact the recipient to coordinate delivery.
    DELIVEREDTOBELHINDWHEELIEBIN="DeliveredToBehindWheelieBin"	#Shipment delivered behind wheelie bin.
    DELIVEREDTOPORCH="DeliveredToPorch"	#Shipment delivered to front porch or front door.
    DELIVEREDTOGARAGE="DeliveredToGarage"	#Shipment delivered to garage.
    DELIVEREDTOGARDEN="DeliveredToGarden"	#Shipment delivered to garden.
    DELIVEREDTOGREENHOUS="DeliveredToGreenhouse"	#Shipment delivered to greenhouse.
    DELIVEREDTOMAILSLOT="DeliveredToMailSlot"	#Shipment delivered to letterbox/mail slot.
    DELIVEREDTOMAILROOM="DeliveredToMailRoom"	#Shipment delivered to mailroom.
    DELIVEREDTONEIGHBOUR="DeliveredToNeighbor"	#Shipment delivered and signed for by neighbor.
    DELIVEREDTOREARDOOR="DeliveredToRearDoor"	#Shipment delivered to rear porch or rear door.
    DELIVEREDTORECEPTIONIST="DeliveredToReceptionist"	#Shipment delivered to reception.
    DELIVEREDTOSHED="DeliveredToShed"	#Shipment delivered to shed.
    SIGNED="Signed"	#Shipment delivered and signature received.
    DAMAGED="Damaged"	#Shipment was damaged. When paired with Rejected this indicates the recipient refused to accept the shipment because the shipment was damaged. When paired with UNDELIVERABLE it means the shipment was undeliverable due to being damaged and may be returned to the seller.
    INCORRECTITEMS="IncorrectItems"	#Recipient refused to accept the shipment because the shipment contains incorrect item/s.
    NOTREQUIRED="NotRequired"	#Recipient refused to accept the shipment because the recipient did not want the shipment.
    REJECTED="Rejected"	#Recipient refused to accept the shipment.
    CANCELLEDBYRECIPIENT="CancelledByRecipient"	#Shipment was cancelled by the recipient. This tag is paired with the rejected shipment status.
    ADDRESSNOTFOUND="AddressNotFound"	#Shipment is undeliverable and is returning to seller because the address was missing or incorrect.
    HAZMATSHIPMENT="HazmatShipment"	#Shipment is non-compliant Hazmat.
    UNDELIVERABLE="Undeliverable"	#Shipment is undeliverable and is returning to the seller.

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """DetailCodes - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailCodes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailCodes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
