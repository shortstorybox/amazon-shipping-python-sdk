# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollectionFormsHistoryRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carrier_name': 'CarrierName',
        'creation_date': 'str',
        'generation_status': 'GenerationStatus',
        'collection_form_id': 'CollectionFormId',
        'ship_from_address': 'Address'
    }

    attribute_map = {
        'carrier_name': 'carrierName',
        'creation_date': 'creationDate',
        'generation_status': 'generationStatus',
        'collection_form_id': 'collectionFormId',
        'ship_from_address': 'shipFromAddress'
    }

    def __init__(self, carrier_name=None, creation_date=None, generation_status=None, collection_form_id=None, ship_from_address=None):  # noqa: E501
        """CollectionFormsHistoryRecord - a model defined in Swagger"""  # noqa: E501
        self._carrier_name = None
        self._creation_date = None
        self._generation_status = None
        self._collection_form_id = None
        self._ship_from_address = None
        self.discriminator = None
        if carrier_name is not None:
            self.carrier_name = carrier_name
        if creation_date is not None:
            self.creation_date = creation_date
        if generation_status is not None:
            self.generation_status = generation_status
        if collection_form_id is not None:
            self.collection_form_id = collection_form_id
        if ship_from_address is not None:
            self.ship_from_address = ship_from_address

    @property
    def carrier_name(self):
        """Gets the carrier_name of this CollectionFormsHistoryRecord.  # noqa: E501


        :return: The carrier_name of this CollectionFormsHistoryRecord.  # noqa: E501
        :rtype: CarrierName
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this CollectionFormsHistoryRecord.


        :param carrier_name: The carrier_name of this CollectionFormsHistoryRecord.  # noqa: E501
        :type: CarrierName
        """

        self._carrier_name = carrier_name

    @property
    def creation_date(self):
        """Gets the creation_date of this CollectionFormsHistoryRecord.  # noqa: E501

        Creation Time for this account.  # noqa: E501

        :return: The creation_date of this CollectionFormsHistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CollectionFormsHistoryRecord.

        Creation Time for this account.  # noqa: E501

        :param creation_date: The creation_date of this CollectionFormsHistoryRecord.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def generation_status(self):
        """Gets the generation_status of this CollectionFormsHistoryRecord.  # noqa: E501


        :return: The generation_status of this CollectionFormsHistoryRecord.  # noqa: E501
        :rtype: GenerationStatus
        """
        return self._generation_status

    @generation_status.setter
    def generation_status(self, generation_status):
        """Sets the generation_status of this CollectionFormsHistoryRecord.


        :param generation_status: The generation_status of this CollectionFormsHistoryRecord.  # noqa: E501
        :type: GenerationStatus
        """

        self._generation_status = generation_status

    @property
    def collection_form_id(self):
        """Gets the collection_form_id of this CollectionFormsHistoryRecord.  # noqa: E501


        :return: The collection_form_id of this CollectionFormsHistoryRecord.  # noqa: E501
        :rtype: CollectionFormId
        """
        return self._collection_form_id

    @collection_form_id.setter
    def collection_form_id(self, collection_form_id):
        """Sets the collection_form_id of this CollectionFormsHistoryRecord.


        :param collection_form_id: The collection_form_id of this CollectionFormsHistoryRecord.  # noqa: E501
        :type: CollectionFormId
        """

        self._collection_form_id = collection_form_id

    @property
    def ship_from_address(self):
        """Gets the ship_from_address of this CollectionFormsHistoryRecord.  # noqa: E501


        :return: The ship_from_address of this CollectionFormsHistoryRecord.  # noqa: E501
        :rtype: Address
        """
        return self._ship_from_address

    @ship_from_address.setter
    def ship_from_address(self, ship_from_address):
        """Sets the ship_from_address of this CollectionFormsHistoryRecord.


        :param ship_from_address: The ship_from_address of this CollectionFormsHistoryRecord.  # noqa: E501
        :type: Address
        """

        self._ship_from_address = ship_from_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionFormsHistoryRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionFormsHistoryRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
