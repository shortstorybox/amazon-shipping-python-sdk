# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupportedDocumentSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'DocumentFormat',
        'size': 'DocumentSize',
        'print_options': 'PrintOptionList'
    }

    attribute_map = {
        'format': 'format',
        'size': 'size',
        'print_options': 'printOptions'
    }

    def __init__(self, format=None, size=None, print_options=None):  # noqa: E501
        """SupportedDocumentSpecification - a model defined in Swagger"""  # noqa: E501
        self._format = None
        self._size = None
        self._print_options = None
        self.discriminator = None
        self.format = format
        self.size = size
        self.print_options = print_options

    @property
    def format(self):
        """Gets the format of this SupportedDocumentSpecification.  # noqa: E501


        :return: The format of this SupportedDocumentSpecification.  # noqa: E501
        :rtype: DocumentFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SupportedDocumentSpecification.


        :param format: The format of this SupportedDocumentSpecification.  # noqa: E501
        :type: DocumentFormat
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def size(self):
        """Gets the size of this SupportedDocumentSpecification.  # noqa: E501


        :return: The size of this SupportedDocumentSpecification.  # noqa: E501
        :rtype: DocumentSize
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SupportedDocumentSpecification.


        :param size: The size of this SupportedDocumentSpecification.  # noqa: E501
        :type: DocumentSize
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def print_options(self):
        """Gets the print_options of this SupportedDocumentSpecification.  # noqa: E501


        :return: The print_options of this SupportedDocumentSpecification.  # noqa: E501
        :rtype: PrintOptionList
        """
        return self._print_options

    @print_options.setter
    def print_options(self, print_options):
        """Sets the print_options of this SupportedDocumentSpecification.


        :param print_options: The print_options of this SupportedDocumentSpecification.  # noqa: E501
        :type: PrintOptionList
        """
        if print_options is None:
            raise ValueError("Invalid value for `print_options`, must not be `None`")  # noqa: E501

        self._print_options = print_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportedDocumentSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportedDocumentSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
