# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RateItemID(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    BASE_RATE = "BASE_RATE"
    TRANSACTION_FEE = "TRANSACTION_FEE"
    ADULT_SIGNATURE_CONFIRMATION = "ADULT_SIGNATURE_CONFIRMATION"
    SIGNATURE_CONFIRMATION = "SIGNATURE_CONFIRMATION"
    NO_CONFIRMATION = "NO_CONFIRMATION"
    WAIVE_SIGNATURE = "WAIVE_SIGNATURE"
    IMPLIED_LIABILITY = "IMPLIED_LIABILITY"
    HIDDEN_POSTAGE = "HIDDEN_POSTAGE"
    DECLARED_VALUE = "DECLARED_VALUE"
    SUNDAY_HOLIDAY_DELIVERY = "SUNDAY_HOLIDAY_DELIVERY"
    DELIVERY_CONFIRMATION = "DELIVERY_CONFIRMATION"
    IMPORT_DUTY_CHARGE = "IMPORT_DUTY_CHARGE"
    VAT = "VAT"
    NO_SATURDAY_DELIVERY = "NO_SATURDAY_DELIVERY"
    INSURANCE = "INSURANCE"
    COD = "COD"
    FUEL_SURCHARGE = "FUEL_SURCHARGE"
    INSPECTION_CHARGE = "INSPECTION_CHARGE"
    DELIVERY_AREA_SURCHARGE = "DELIVERY_AREA_SURCHARGE"
    WAYBILL_CHARGE = "WAYBILL_CHARGE"
    AMAZON_SPONSORED_DISCOUNT = "AMAZON_SPONSORED_DISCOUNT"
    INTEGRATOR_SPONSORED_DISCOUNT = "INTEGRATOR_SPONSORED_DISCOUNT"
    OVERSIZE_SURCHARGE = "OVERSIZE_SURCHARGE"
    CONGESTION_CHARGE = "CONGESTION_CHARGE"
    RESIDENTIAL_SURCHARGE = "RESIDENTIAL_SURCHARGE"
    ADDITIONAL_SURCHARGE = "ADDITIONAL_SURCHARGE"
    SURCHARGE = "SURCHARGE"
    REBATE = "REBATE"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """RateItemID - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RateItemID, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RateItemID):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
