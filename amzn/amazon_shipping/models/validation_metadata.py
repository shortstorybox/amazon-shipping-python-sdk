# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValidationMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_message': 'str',
        'validation_strategy': 'str',
        'value': 'str'
    }

    attribute_map = {
        'error_message': 'errorMessage',
        'validation_strategy': 'validationStrategy',
        'value': 'value'
    }

    def __init__(self, error_message=None, validation_strategy=None, value=None):  # noqa: E501
        """ValidationMetadata - a model defined in Swagger"""  # noqa: E501
        self._error_message = None
        self._validation_strategy = None
        self._value = None
        self.discriminator = None
        if error_message is not None:
            self.error_message = error_message
        if validation_strategy is not None:
            self.validation_strategy = validation_strategy
        if value is not None:
            self.value = value

    @property
    def error_message(self):
        """Gets the error_message of this ValidationMetadata.  # noqa: E501

        errorMessage for the error.  # noqa: E501

        :return: The error_message of this ValidationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ValidationMetadata.

        errorMessage for the error.  # noqa: E501

        :param error_message: The error_message of this ValidationMetadata.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def validation_strategy(self):
        """Gets the validation_strategy of this ValidationMetadata.  # noqa: E501

        validationStrategy for the error.  # noqa: E501

        :return: The validation_strategy of this ValidationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._validation_strategy

    @validation_strategy.setter
    def validation_strategy(self, validation_strategy):
        """Sets the validation_strategy of this ValidationMetadata.

        validationStrategy for the error.  # noqa: E501

        :param validation_strategy: The validation_strategy of this ValidationMetadata.  # noqa: E501
        :type: str
        """

        self._validation_strategy = validation_strategy

    @property
    def value(self):
        """Gets the value of this ValidationMetadata.  # noqa: E501

        Value.  # noqa: E501

        :return: The value of this ValidationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValidationMetadata.

        Value.  # noqa: E501

        :param value: The value of this ValidationMetadata.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidationMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
