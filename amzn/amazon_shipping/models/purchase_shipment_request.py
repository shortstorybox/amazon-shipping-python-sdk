# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PurchaseShipmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_token': 'RequestToken',
        'rate_id': 'RateId',
        'requested_document_specification': 'RequestedDocumentSpecification',
        'requested_value_added_services': 'RequestedValueAddedServiceList',
        'additional_inputs': 'dict(str, object)'
    }

    attribute_map = {
        'request_token': 'requestToken',
        'rate_id': 'rateId',
        'requested_document_specification': 'requestedDocumentSpecification',
        'requested_value_added_services': 'requestedValueAddedServices',
        'additional_inputs': 'additionalInputs'
    }

    def __init__(self, request_token=None, rate_id=None, requested_document_specification=None, requested_value_added_services=None, additional_inputs=None):  # noqa: E501
        """PurchaseShipmentRequest - a model defined in Swagger"""  # noqa: E501
        self._request_token = None
        self._rate_id = None
        self._requested_document_specification = None
        self._requested_value_added_services = None
        self._additional_inputs = None
        self.discriminator = None
        self.request_token = request_token
        self.rate_id = rate_id
        self.requested_document_specification = requested_document_specification
        if requested_value_added_services is not None:
            self.requested_value_added_services = requested_value_added_services
        if additional_inputs is not None:
            self.additional_inputs = additional_inputs

    @property
    def request_token(self):
        """Gets the request_token of this PurchaseShipmentRequest.  # noqa: E501


        :return: The request_token of this PurchaseShipmentRequest.  # noqa: E501
        :rtype: RequestToken
        """
        return self._request_token

    @request_token.setter
    def request_token(self, request_token):
        """Sets the request_token of this PurchaseShipmentRequest.


        :param request_token: The request_token of this PurchaseShipmentRequest.  # noqa: E501
        :type: RequestToken
        """
        if request_token is None:
            raise ValueError("Invalid value for `request_token`, must not be `None`")  # noqa: E501

        self._request_token = request_token

    @property
    def rate_id(self):
        """Gets the rate_id of this PurchaseShipmentRequest.  # noqa: E501


        :return: The rate_id of this PurchaseShipmentRequest.  # noqa: E501
        :rtype: RateId
        """
        return self._rate_id

    @rate_id.setter
    def rate_id(self, rate_id):
        """Sets the rate_id of this PurchaseShipmentRequest.


        :param rate_id: The rate_id of this PurchaseShipmentRequest.  # noqa: E501
        :type: RateId
        """
        if rate_id is None:
            raise ValueError("Invalid value for `rate_id`, must not be `None`")  # noqa: E501

        self._rate_id = rate_id

    @property
    def requested_document_specification(self):
        """Gets the requested_document_specification of this PurchaseShipmentRequest.  # noqa: E501


        :return: The requested_document_specification of this PurchaseShipmentRequest.  # noqa: E501
        :rtype: RequestedDocumentSpecification
        """
        return self._requested_document_specification

    @requested_document_specification.setter
    def requested_document_specification(self, requested_document_specification):
        """Sets the requested_document_specification of this PurchaseShipmentRequest.


        :param requested_document_specification: The requested_document_specification of this PurchaseShipmentRequest.  # noqa: E501
        :type: RequestedDocumentSpecification
        """
        if requested_document_specification is None:
            raise ValueError("Invalid value for `requested_document_specification`, must not be `None`")  # noqa: E501

        self._requested_document_specification = requested_document_specification

    @property
    def requested_value_added_services(self):
        """Gets the requested_value_added_services of this PurchaseShipmentRequest.  # noqa: E501


        :return: The requested_value_added_services of this PurchaseShipmentRequest.  # noqa: E501
        :rtype: RequestedValueAddedServiceList
        """
        return self._requested_value_added_services

    @requested_value_added_services.setter
    def requested_value_added_services(self, requested_value_added_services):
        """Sets the requested_value_added_services of this PurchaseShipmentRequest.


        :param requested_value_added_services: The requested_value_added_services of this PurchaseShipmentRequest.  # noqa: E501
        :type: RequestedValueAddedServiceList
        """

        self._requested_value_added_services = requested_value_added_services

    @property
    def additional_inputs(self):
        """Gets the additional_inputs of this PurchaseShipmentRequest.  # noqa: E501

        The additional inputs required to purchase a shipping offering, in JSON format. The JSON provided here must adhere to the JSON schema that is returned in the response to the getAdditionalInputs operation.  Additional inputs are only required when indicated by the requiresAdditionalInputs property in the response to the getRates operation.  # noqa: E501

        :return: The additional_inputs of this PurchaseShipmentRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._additional_inputs

    @additional_inputs.setter
    def additional_inputs(self, additional_inputs):
        """Sets the additional_inputs of this PurchaseShipmentRequest.

        The additional inputs required to purchase a shipping offering, in JSON format. The JSON provided here must adhere to the JSON schema that is returned in the response to the getAdditionalInputs operation.  Additional inputs are only required when indicated by the requiresAdditionalInputs property in the response to the getRates operation.  # noqa: E501

        :param additional_inputs: The additional_inputs of this PurchaseShipmentRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._additional_inputs = additional_inputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseShipmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseShipmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
