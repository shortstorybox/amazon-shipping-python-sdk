# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state_or_region': 'StateOrRegion',
        'city': 'City',
        'country_code': 'CountryCode',
        'postal_code': 'PostalCode'
    }

    attribute_map = {
        'state_or_region': 'stateOrRegion',
        'city': 'city',
        'country_code': 'countryCode',
        'postal_code': 'postalCode'
    }

    def __init__(self, state_or_region=None, city=None, country_code=None, postal_code=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._state_or_region = None
        self._city = None
        self._country_code = None
        self._postal_code = None
        self.discriminator = None
        if state_or_region is not None:
            self.state_or_region = state_or_region
        if city is not None:
            self.city = city
        if country_code is not None:
            self.country_code = country_code
        if postal_code is not None:
            self.postal_code = postal_code

    @property
    def state_or_region(self):
        """Gets the state_or_region of this Location.  # noqa: E501


        :return: The state_or_region of this Location.  # noqa: E501
        :rtype: StateOrRegion
        """
        return self._state_or_region

    @state_or_region.setter
    def state_or_region(self, state_or_region):
        """Sets the state_or_region of this Location.


        :param state_or_region: The state_or_region of this Location.  # noqa: E501
        :type: StateOrRegion
        """

        self._state_or_region = state_or_region

    @property
    def city(self):
        """Gets the city of this Location.  # noqa: E501


        :return: The city of this Location.  # noqa: E501
        :rtype: City
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.


        :param city: The city of this Location.  # noqa: E501
        :type: City
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this Location.  # noqa: E501


        :return: The country_code of this Location.  # noqa: E501
        :rtype: CountryCode
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Location.


        :param country_code: The country_code of this Location.  # noqa: E501
        :type: CountryCode
        """

        self._country_code = country_code

    @property
    def postal_code(self):
        """Gets the postal_code of this Location.  # noqa: E501


        :return: The postal_code of this Location.  # noqa: E501
        :rtype: PostalCode
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Location.


        :param postal_code: The postal_code of this Location.  # noqa: E501
        :type: PostalCode
        """

        self._postal_code = postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
