# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.  # noqa: E501

    OpenAPI spec version: v2
    Contact: swa-api-core@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExcludedBenefit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'benefit': 'str',
        'reason_code': 'str'
    }

    attribute_map = {
        'benefit': 'benefit',
        'reason_code': 'reasonCode'
    }

    def __init__(self, benefit=None, reason_code=None):  # noqa: E501
        """ExcludedBenefit - a model defined in Swagger"""  # noqa: E501
        self._benefit = None
        self._reason_code = None
        self.discriminator = None
        self.benefit = benefit
        self.reason_code = reason_code

    @property
    def benefit(self):
        """Gets the benefit of this ExcludedBenefit.  # noqa: E501


        :return: The benefit of this ExcludedBenefit.  # noqa: E501
        :rtype: str
        """
        return self._benefit

    @benefit.setter
    def benefit(self, benefit):
        """Sets the benefit of this ExcludedBenefit.


        :param benefit: The benefit of this ExcludedBenefit.  # noqa: E501
        :type: str
        """
        if benefit is None:
            raise ValueError("Invalid value for `benefit`, must not be `None`")  # noqa: E501

        self._benefit = benefit

    @property
    def reason_code(self):
        """Gets the reason_code of this ExcludedBenefit.  # noqa: E501


        :return: The reason_code of this ExcludedBenefit.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ExcludedBenefit.


        :param reason_code: The reason_code of this ExcludedBenefit.  # noqa: E501
        :type: str
        """
        if reason_code is None:
            raise ValueError("Invalid value for `reason_code`, must not be `None`")  # noqa: E501

        self._reason_code = reason_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExcludedBenefit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExcludedBenefit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
